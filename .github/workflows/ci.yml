name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libportaudio2 libsndfile1 libxkbcommon-x11-0 libxcb-xinerama0 libxcb-cursor0 xvfb libegl1 libgl1

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio libsndfile

    - name: Install project with dev dependencies
      run: |
        uv sync --all-extras

    - name: Lint with ruff
      run: |
        uv run ruff check .
        uv run ruff format --check .

    - name: Type check with mypy
      run: |
        uv run mypy src

    - name: Test with pytest (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Test with pytest (Windows/macOS)
      if: matrix.os != 'ubuntu-latest'
      run: |
        uv run pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

    - name: Upload coverage reports to Codecov
      if: matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dev dependencies
      run: |
        uv sync --all-extras
    
    - name: Security check with bandit
      run: uv run bandit -r src -f json -o bandit-report.json || true
    
    # Safety check is temporarily disabled due to API issues
    # - name: Dependency security check
    #   run: uv run safety check --json || true

  build:
    needs: [test, code-quality]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
            artifact_name: KawaiiVoiceChanger
            artifact_ext: ''
          - os: windows-latest
            name: Windows
            artifact_name: KawaiiVoiceChanger.exe
            artifact_ext: '.exe'
          - os: macos-latest
            name: macOS
            artifact_name: KawaiiVoiceChanger
            artifact_ext: ''
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libportaudio2 libsndfile1 libxkbcommon-x11-0 libxcb-xinerama0 libxcb-cursor0 xvfb libegl1 libgl1 libasound2-dev
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio libsndfile
    
    - name: Install project with build dependencies
      run: |
        uv sync --extra build
    
    - name: Build executable with PyInstaller
      run: |
        uv run pyinstaller kawaii_voice_changer.spec --clean
    
    - name: Create distribution package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        7z a -tzip ../KawaiiVoiceChanger-${{ matrix.name }}.zip KawaiiVoiceChanger/
      shell: bash
    
    - name: Create distribution package (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        if [ -d "KawaiiVoiceChanger.app" ]; then
          zip -r ../KawaiiVoiceChanger-${{ matrix.name }}.zip KawaiiVoiceChanger.app
        elif [ -d "KawaiiVoiceChanger" ]; then
          zip -r ../KawaiiVoiceChanger-${{ matrix.name }}.zip KawaiiVoiceChanger/
        else
          echo "Error: Neither KawaiiVoiceChanger.app nor KawaiiVoiceChanger directory found"
          ls -la
          exit 1
        fi
    
    - name: Create distribution package (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist
        tar -czf ../KawaiiVoiceChanger-${{ matrix.name }}.tar.gz KawaiiVoiceChanger/
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: KawaiiVoiceChanger-${{ matrix.name }}-${{ github.sha }}
        path: |
          KawaiiVoiceChanger-*.zip
          KawaiiVoiceChanger-*.tar.gz