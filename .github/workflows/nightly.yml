name: Nightly Build

on:
  push:
    branches:
      - main
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for recent changes or push event
      id: check
      run: |
        # Always build on push events
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "Push event detected, proceeding with build"
        else
          # Check if there were commits in the last 24 hours for scheduled runs
          LAST_COMMIT=$(git log -1 --format=%ct)
          CURRENT_TIME=$(date +%s)
          DIFF=$((CURRENT_TIME - LAST_COMMIT))
          
          if [ $DIFF -lt 86400 ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Recent changes detected, proceeding with build"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "No recent changes, skipping build"
          fi
        fi

  nightly-build:
    needs: check-changes
    if: needs.check-changes.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
            artifact_name: KawaiiVoiceChanger-Linux-nightly
            build_name: KawaiiVoiceChanger
          - os: windows-latest
            name: Windows
            artifact_name: KawaiiVoiceChanger-Windows-nightly
            build_name: KawaiiVoiceChanger.exe
          - os: macos-latest
            name: macOS
            artifact_name: KawaiiVoiceChanger-macOS-nightly
            build_name: KawaiiVoiceChanger
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libportaudio2 libsndfile1 libasound2-dev libegl1 libgl1 libxcb-xinerama0 libxcb-cursor0
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio libsndfile
    
    - name: Install project with build dependencies
      run: |
        uv sync --extra build
    
    - name: Set version to nightly
      run: |
        DATE=$(date +%Y%m%d)
        echo "VERSION=nightly-$DATE" >> $GITHUB_ENV
      shell: bash
    
    - name: Build executable
      run: |
        uv run pyinstaller kawaii_voice_changer.spec --clean
    
    - name: Create nightly package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        7z a -tzip ../${{ matrix.artifact_name }}.zip ${{ matrix.build_name }}
      shell: bash
    
    - name: Create nightly package (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        if [ -d "KawaiiVoiceChanger.app" ]; then
          zip -r ../${{ matrix.artifact_name }}.zip KawaiiVoiceChanger.app
        else
          zip ../${{ matrix.artifact_name }}.zip ${{ matrix.build_name }}
        fi
    
    - name: Create nightly package (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist
        tar -czf ../${{ matrix.artifact_name }}.tar.gz ${{ matrix.build_name }}
    
    # Test binary before upload
    - name: Test binary startup (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Install additional Qt dependencies
        sudo apt-get install -y xvfb libegl1 libgl1 libxcb-xinerama0 libxcb-cursor0 \
          libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
          libxcb-shape0 libxcb-sync1 libxcb-xfixes0 libxcb-xkb1 libxkbcommon-x11-0 \
          libdbus-1-3 libfontconfig1 libfreetype6
        
        # Set up virtual display
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        
        # Enable Qt debugging
        export QT_DEBUG_PLUGINS=1
        export QT_QPA_PLATFORM=xcb
        
        # Test binary
        cd dist
        chmod +x ${{ matrix.build_name }}
        
        # First check if binary can be executed and get library dependencies
        echo "Checking binary dependencies:"
        ldd ./${{ matrix.build_name }} || true
        
        # Test with timeout
        timeout 10s ./${{ matrix.build_name }} --help || EXIT_CODE=$?
        if [ "$EXIT_CODE" != "124" ] && [ "$EXIT_CODE" != "0" ]; then
          echo "Binary test failed with exit code: $EXIT_CODE"
          exit 1
        fi
        echo "Binary test passed"
      shell: bash

    - name: Test binary startup (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Test binary existence and basic execution
        if (!(Test-Path "./dist/${{ matrix.build_name }}")) {
          Write-Error "Binary not found at ./dist/${{ matrix.build_name }}"
          exit 1
        }
        
        Write-Host "Binary found at ./dist/${{ matrix.build_name }}"
        
        # Try to start the process with --help first
        try {
          $helpProcess = Start-Process -FilePath "./dist/${{ matrix.build_name }}" -ArgumentList "--help" -PassThru -Wait -NoNewWindow -ErrorAction Stop
          if ($helpProcess.ExitCode -eq 0) {
            Write-Host "Binary --help test passed"
          } else {
            Write-Host "Binary --help returned exit code: $($helpProcess.ExitCode), continuing with GUI test"
          }
        } catch {
          Write-Host "Could not run with --help, continuing with GUI test: $_"
        }
        
        # Test GUI startup
        try {
          $process = Start-Process -FilePath "./dist/${{ matrix.build_name }}" -PassThru -ErrorAction Stop
          Start-Sleep -Seconds 5
          
          if ($process.HasExited) {
            if ($process.ExitCode -ne 0) {
              Write-Error "Binary exited immediately with code: $($process.ExitCode)"
              exit 1
            }
          } else {
            # Process is still running, which is expected for a GUI app
            Write-Host "Binary is running (PID: $($process.Id))"
            Stop-Process -Id $process.Id -Force
            Write-Host "Binary test passed - GUI started successfully"
          }
        } catch {
          Write-Error "Failed to start binary: $_"
          exit 1
        }
      shell: powershell

    - name: Test binary startup (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install timeout command on macOS
        brew install coreutils
        
        # Check if app bundle exists
        if [ -d "dist/KawaiiVoiceChanger.app" ]; then
          echo "Found app bundle at dist/KawaiiVoiceChanger.app"
          
          # Check app bundle structure
          echo "App bundle contents:"
          ls -la dist/KawaiiVoiceChanger.app/Contents/
          ls -la dist/KawaiiVoiceChanger.app/Contents/MacOS/
          
          # Check executable permissions
          chmod +x dist/KawaiiVoiceChanger.app/Contents/MacOS/KawaiiVoiceChanger || true
          
          # Test 1: Check if binary can display help
          echo "Test 1: Checking --help option"
          gtimeout 10s ./dist/KawaiiVoiceChanger.app/Contents/MacOS/KawaiiVoiceChanger --help || EXIT_CODE=$?
          if [ "$EXIT_CODE" != "124" ] && [ "$EXIT_CODE" != "0" ]; then
            echo "Help test failed with exit code: $EXIT_CODE"
            # Don't fail immediately, continue with other tests
          else
            echo "Help test passed"
          fi
          
          # Test 2: Check if app bundle can be opened (simulates double-click)
          echo "Test 2: Testing app bundle launch"
          # Use open command with timeout to simulate actual app launch
          gtimeout 10s open -W dist/KawaiiVoiceChanger.app || OPEN_EXIT_CODE=$?
          if [ "$OPEN_EXIT_CODE" == "124" ]; then
            echo "App bundle launch test passed (timeout expected for GUI app)"
          elif [ "$OPEN_EXIT_CODE" != "0" ]; then
            echo "App bundle launch failed with exit code: $OPEN_EXIT_CODE"
            # Check crash logs
            echo "Checking for crash logs..."
            log show --predicate 'eventMessage contains "KawaiiVoiceChanger"' --info --last 2m || true
            exit 1
          fi
          
          # Test 3: Check binary dependencies
          echo "Test 3: Checking binary dependencies"
          otool -L dist/KawaiiVoiceChanger.app/Contents/MacOS/KawaiiVoiceChanger || true
          
        elif [ -f "dist/${{ matrix.build_name }}" ]; then
          echo "Found standalone binary at dist/${{ matrix.build_name }}"
          chmod +x dist/${{ matrix.build_name }}
          gtimeout 10s ./dist/${{ matrix.build_name }} --help || EXIT_CODE=$?
          if [ "$EXIT_CODE" != "124" ] && [ "$EXIT_CODE" != "0" ]; then
            echo "Binary test failed with exit code: $EXIT_CODE"
            exit 1
          fi
        else
          echo "ERROR: No binary found!"
          ls -la dist/
          exit 1
        fi
        
        echo "All binary tests passed"
      shell: bash
    
    - name: Upload nightly build
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ github.sha }}
        path: |
          ${{ matrix.artifact_name }}.zip
          ${{ matrix.artifact_name }}.tar.gz
        retention-days: 7

  create-nightly-release:
    needs: nightly-build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Delete old nightly release
      uses: dev-drprasad/delete-tag-and-release@v1.0
      with:
        tag_name: nightly
        github_token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Create nightly release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: nightly
        name: Nightly Build
        body: |
          # 🌙 Nightly Build
          
          最新の開発版ビルドです。安定性は保証されません。
          
          **ビルド日時**: ${{ github.event.repository.updated_at }}
          **コミット**: ${{ github.sha }}
          
          ## ⚠️ 注意事項
          
          - このビルドは自動生成された開発版です
          - 本番環境での使用は推奨されません
          - バグや不具合が含まれている可能性があります
          
          ## 📥 ダウンロード
          
          - **Windows**: `KawaiiVoiceChanger-Windows-nightly.zip`
          - **macOS**: `KawaiiVoiceChanger-macOS-nightly.zip`
          - **Linux**: `KawaiiVoiceChanger-Linux-nightly.tar.gz`
          
        files: |
          ./artifacts/**/*.zip
          ./artifacts/**/*.tar.gz
        draft: false
        prerelease: true