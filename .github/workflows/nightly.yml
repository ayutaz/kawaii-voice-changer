name: Nightly Build

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Check for recent changes or push/PR event
      id: check
      run: |
        # Always build on push and pull_request events
        if [ "${{ github.event_name }}" == "push" ] || [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "should_build=true" >> $GITHUB_OUTPUT
          echo "${{ github.event_name }} event detected, proceeding with build"
        else
          # Check if there were commits in the last 24 hours for scheduled runs
          LAST_COMMIT=$(git log -1 --format=%ct)
          CURRENT_TIME=$(date +%s)
          DIFF=$((CURRENT_TIME - LAST_COMMIT))
          
          if [ $DIFF -lt 86400 ]; then
            echo "should_build=true" >> $GITHUB_OUTPUT
            echo "Recent changes detected, proceeding with build"
          else
            echo "should_build=false" >> $GITHUB_OUTPUT
            echo "No recent changes, skipping build"
          fi
        fi

  nightly-build:
    needs: check-changes
    if: needs.check-changes.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
            artifact_name: KawaiiVoiceChanger-Linux-nightly
            build_name: KawaiiVoiceChanger
          - os: windows-latest
            name: Windows
            artifact_name: KawaiiVoiceChanger-Windows-nightly
            build_name: KawaiiVoiceChanger.exe
          - os: macos-latest
            name: macOS
            artifact_name: KawaiiVoiceChanger-macOS-nightly
            build_name: KawaiiVoiceChanger
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libportaudio2 libsndfile1 libasound2-dev libegl1 libgl1 libxcb-xinerama0 libxcb-cursor0
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio libsndfile
    
    - name: Install project with build dependencies
      run: |
        # Install dependencies including build tools
        uv sync --extra build
        
        # List installed packages for debugging
        echo "=== Installed packages ==="
        uv pip list
    
    - name: Set version to nightly
      run: |
        DATE=$(date +%Y%m%d)
        echo "VERSION=nightly-$DATE" >> $GITHUB_ENV
      shell: bash
    
    - name: Build executable
      run: |
        # List files to debug
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        # Check if spec file exists
        if [ -f "kawaii_voice_changer.spec" ]; then
          echo "spec file found"
        else
          echo "ERROR: spec file not found!"
          exit 1
        fi
        
        # Show Python and PyInstaller version
        uv run python --version
        uv run pyinstaller --version
        
        # Build with explicit path and verbose output
        echo "Starting PyInstaller build..."
        uv run pyinstaller ./kawaii_voice_changer.spec --clean || {
          echo "Build failed! Exit code: $?"
          echo "=== Last 200 lines of output ==="
          exit 1
        }
      shell: bash
    
    - name: Create nightly package (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Check if directory exists (onedir mode)
        if (Test-Path "dist/KawaiiVoiceChanger") {
          Write-Host "Directory found at dist/KawaiiVoiceChanger"
          Compress-Archive -Path "dist/KawaiiVoiceChanger" -DestinationPath "${{ matrix.artifact_name }}.zip" -Force
          Write-Host "Package created: ${{ matrix.artifact_name }}.zip"
        } else {
          Write-Error "Directory not found at dist/KawaiiVoiceChanger"
          Get-ChildItem -Path dist -Recurse | Select-Object FullName
          exit 1
        }
      shell: powershell
    
    - name: Create nightly package (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        cd dist
        if [ -d "KawaiiVoiceChanger.app" ]; then
          echo "Found app bundle"
          zip -r ../${{ matrix.artifact_name }}.zip KawaiiVoiceChanger.app
        elif [ -d "KawaiiVoiceChanger" ]; then
          echo "Found directory bundle"
          zip -r ../${{ matrix.artifact_name }}.zip KawaiiVoiceChanger/
        else
          echo "ERROR: No bundle found!"
          ls -la
          exit 1
        fi
    
    - name: Create nightly package (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cd dist
        if [ -d "KawaiiVoiceChanger" ]; then
          echo "Found directory bundle"
          tar -czf ../${{ matrix.artifact_name }}.tar.gz KawaiiVoiceChanger/
        else
          echo "ERROR: No bundle found!"
          ls -la
          exit 1
        fi
    
    # Test binary before upload
    - name: Test binary startup (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Install additional Qt dependencies
        sudo apt-get install -y xvfb libegl1 libgl1 libxcb-xinerama0 libxcb-cursor0 \
          libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
          libxcb-shape0 libxcb-sync1 libxcb-xfixes0 libxcb-xkb1 libxkbcommon-x11-0 \
          libdbus-1-3 libfontconfig1 libfreetype6
        
        # Set up virtual display
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        
        # Enable Qt debugging
        export QT_DEBUG_PLUGINS=1
        export QT_QPA_PLATFORM=xcb
        
        # Test binary
        cd dist/KawaiiVoiceChanger
        chmod +x KawaiiVoiceChanger
        
        # Check if binary exists and is executable
        if [ -f "KawaiiVoiceChanger" ]; then
          echo "Binary found and made executable"
          # Check library dependencies
          echo "Checking binary dependencies:"
          ldd ./KawaiiVoiceChanger || true
          echo "Binary test passed - executable exists"
        else
          echo "ERROR: Binary not found!"
          ls -la
          exit 1
        fi
      shell: bash

    - name: Test binary startup (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Test binary existence
        if (!(Test-Path "./dist/KawaiiVoiceChanger/KawaiiVoiceChanger.exe")) {
          Write-Error "Binary not found at ./dist/KawaiiVoiceChanger/KawaiiVoiceChanger.exe"
          Get-ChildItem -Path dist -Recurse | Select-Object FullName
          exit 1
        }
        
        Write-Host "Binary found at ./dist/KawaiiVoiceChanger/KawaiiVoiceChanger.exe"
        Write-Host "Binary test passed - executable exists"
        
        # Skip actual execution test for GUI applications to prevent hanging
        # The successful build and packaging is sufficient for nightly builds
      shell: powershell

    - name: Test binary startup (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install timeout command on macOS
        brew install coreutils
        
        # Check if app bundle exists
        if [ -d "dist/KawaiiVoiceChanger.app" ]; then
          echo "Found app bundle at dist/KawaiiVoiceChanger.app"
          
          # Check app bundle structure
          echo "App bundle contents:"
          ls -la dist/KawaiiVoiceChanger.app/Contents/
          ls -la dist/KawaiiVoiceChanger.app/Contents/MacOS/
          
          # Check executable permissions
          chmod +x dist/KawaiiVoiceChanger.app/Contents/MacOS/KawaiiVoiceChanger || true
          
          # Test 1: Check binary dependencies
          echo "Test 1: Checking binary dependencies"
          otool -L dist/KawaiiVoiceChanger.app/Contents/MacOS/KawaiiVoiceChanger || true
          
          echo "Binary test passed - app bundle structure is valid"
          
        elif [ -d "dist/KawaiiVoiceChanger" ]; then
          echo "Found directory bundle at dist/KawaiiVoiceChanger"
          chmod +x dist/KawaiiVoiceChanger/KawaiiVoiceChanger
          # Check binary dependencies
          otool -L dist/KawaiiVoiceChanger/KawaiiVoiceChanger || true
          echo "Binary test passed - directory bundle is valid"
        else
          echo "ERROR: No binary found!"
          ls -la dist/
          exit 1
        fi
      shell: bash
    
    - name: Upload nightly build
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}-${{ github.sha }}
        path: |
          ${{ matrix.artifact_name }}.zip
          ${{ matrix.artifact_name }}.tar.gz
        retention-days: 7

  create-nightly-release:
    needs: nightly-build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Delete old nightly release
      uses: dev-drprasad/delete-tag-and-release@v1.0
      with:
        tag_name: nightly
        github_token: ${{ secrets.GITHUB_TOKEN }}
      continue-on-error: true
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Create nightly release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: nightly
        name: Nightly Build
        body: |
          # 🌙 Nightly Build
          
          最新の開発版ビルドです。安定性は保証されません。
          
          **ビルド日時**: ${{ github.event.repository.updated_at }}
          **コミット**: ${{ github.sha }}
          
          ## ⚠️ 注意事項
          
          - このビルドは自動生成された開発版です
          - 本番環境での使用は推奨されません
          - バグや不具合が含まれている可能性があります
          
          ## 📥 ダウンロード
          
          - **Windows**: `KawaiiVoiceChanger-Windows-nightly.zip`
          - **macOS**: `KawaiiVoiceChanger-macOS-nightly.zip`
          - **Linux**: `KawaiiVoiceChanger-Linux-nightly.tar.gz`
          
        files: |
          ./artifacts/**/*.zip
          ./artifacts/**/*.tar.gz
        draft: false
        prerelease: true