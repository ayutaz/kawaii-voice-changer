name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v0.1.0)'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
            artifact_name: KawaiiVoiceChanger-Linux
            build_name: KawaiiVoiceChanger
            package_ext: .tar.gz
            package_cmd: tar -czf
          - os: windows-latest
            name: Windows
            artifact_name: KawaiiVoiceChanger-Windows
            build_name: KawaiiVoiceChanger.exe
            package_ext: .zip
            package_cmd: 7z a -tzip
          - os: macos-latest
            name: macOS
            artifact_name: KawaiiVoiceChanger-macOS
            build_name: KawaiiVoiceChanger
            package_ext: .zip
            package_cmd: zip -r

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        enable-cache: true
        cache-dependency-glob: "pyproject.toml"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libportaudio2 libsndfile1 libegl1 libgl1

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install portaudio libsndfile

    - name: Install project with build dependencies
      run: |
        uv sync --extra build

    - name: Build executable
      run: |
        uv run pyinstaller kawaii_voice_changer.spec --clean

    - name: List build output
      run: |
        echo "Contents of dist directory:"
        ls -la dist/
        echo "Looking for executable:"
        find dist -name "KawaiiVoiceChanger*" -type f -o -name "KawaiiVoiceChanger*" -type d | head -20
      shell: bash

    - name: Create distribution package
      run: |
        cd dist
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          # Check if the executable exists
          if [ -f "${{ matrix.build_name }}" ]; then
            echo "Found ${{ matrix.build_name }}, creating package..."
            7z a -tzip ../${{ matrix.artifact_name }}${{ matrix.package_ext }} ${{ matrix.build_name }}
          else
            echo "ERROR: ${{ matrix.build_name }} not found!"
            exit 1
          fi
        elif [ "${{ matrix.os }}" == "macos-latest" ]; then
          if [ -d "KawaiiVoiceChanger.app" ]; then
            echo "Found KawaiiVoiceChanger.app, creating package..."
            zip -r ../${{ matrix.artifact_name }}${{ matrix.package_ext }} KawaiiVoiceChanger.app
          elif [ -f "${{ matrix.build_name }}" ]; then
            echo "Found ${{ matrix.build_name }}, creating package..."
            zip -r ../${{ matrix.artifact_name }}${{ matrix.package_ext }} ${{ matrix.build_name }}
          else
            echo "ERROR: Neither KawaiiVoiceChanger.app nor ${{ matrix.build_name }} found!"
            exit 1
          fi
        else
          # Linux
          if [ -f "${{ matrix.build_name }}" ]; then
            echo "Found ${{ matrix.build_name }}, creating package..."
            tar -czf ../${{ matrix.artifact_name }}${{ matrix.package_ext }} ${{ matrix.build_name }}
          else
            echo "ERROR: ${{ matrix.build_name }} not found!"
            exit 1
          fi
        fi
        
        echo "Package created successfully"
        ls -la ../
      shell: bash

    # Test binary before upload
    - name: Test binary startup (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        # Install additional Qt dependencies
        sudo apt-get install -y xvfb libegl1 libgl1 libxcb-xinerama0 libxcb-cursor0 \
          libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 \
          libxcb-shape0 libxcb-sync1 libxcb-xfixes0 libxcb-xkb1 libxkbcommon-x11-0 \
          libdbus-1-3 libfontconfig1 libfreetype6
        
        # Set up virtual display
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 3
        
        # Enable Qt debugging
        export QT_DEBUG_PLUGINS=1
        export QT_QPA_PLATFORM=xcb
        
        # Test binary
        cd dist
        chmod +x ${{ matrix.build_name }}
        
        # First check if binary can be executed and get library dependencies
        echo "Checking binary dependencies:"
        ldd ./${{ matrix.build_name }} || true
        
        # Test with timeout
        timeout 10s ./${{ matrix.build_name }} --help || EXIT_CODE=$?
        if [ "$EXIT_CODE" != "124" ] && [ "$EXIT_CODE" != "0" ]; then
          echo "Binary test failed with exit code: $EXIT_CODE"
          exit 1
        fi
        echo "Binary test passed"
      shell: bash

    - name: Test binary startup (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Test binary
        Start-Process -FilePath "./dist/${{ matrix.build_name }}" -ArgumentList "--help" -Wait -NoNewWindow -PassThru -ErrorAction SilentlyContinue | Out-Null
        
        # Quick startup test
        $process = Start-Process -FilePath "./dist/${{ matrix.build_name }}" -PassThru
        Start-Sleep -Seconds 5
        
        if ($process.HasExited -and $process.ExitCode -ne 0) {
          Write-Error "Binary test failed"
          exit 1
        }
        
        if (!$process.HasExited) {
          Stop-Process -Id $process.Id -Force
        }
      shell: powershell

    - name: Test binary startup (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install timeout command on macOS
        brew install coreutils
        
        # Test binary
        if [ -d "dist/KawaiiVoiceChanger.app" ]; then
          gtimeout 10s ./dist/KawaiiVoiceChanger.app/Contents/MacOS/KawaiiVoiceChanger --help || EXIT_CODE=$?
        else
          gtimeout 10s ./dist/${{ matrix.build_name }} --help || EXIT_CODE=$?
        fi
        
        if [ "$EXIT_CODE" != "124" ] && [ "$EXIT_CODE" != "0" ]; then
          echo "Binary test failed with exit code: $EXIT_CODE"
          exit 1
        fi
        echo "Binary test passed"
      shell: bash

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: ${{ matrix.artifact_name }}${{ matrix.package_ext }}

  create-release:
    needs: build-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: List artifacts
      run: |
        ls -la ./artifacts/
        ls -la ./artifacts/*/
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: Release ${{ github.event.inputs.version || github.ref_name }}
        body: |
          # Kawaii Voice Changer ${{ github.event.inputs.version || github.ref_name }}
          
          ## üéâ „ÉÄ„Ç¶„É≥„É≠„Éº„Éâ
          
          „Åä‰Ωø„ÅÑ„ÅÆOS„Å´ÂØæÂøú„Åó„Åü„Éï„Ç°„Ç§„É´„Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö
          
          - **Windows**: `KawaiiVoiceChanger-Windows.zip`
          - **macOS**: `KawaiiVoiceChanger-macOS.zip`
          - **Linux**: `KawaiiVoiceChanger-Linux.tar.gz`
          
          ## üìù Â§âÊõ¥Â±•Ê≠¥
          
          Ë©≥Á¥∞„ÅØ[CHANGELOG.md](https://github.com/ayutaz/kawaii-voice-changer/blob/main/CHANGELOG.md)„Çí„ÅîË¶ß„Åè„Å†„Åï„ÅÑ„ÄÇ
          
        files: |
          ./artifacts/KawaiiVoiceChanger-Windows/*.zip
          ./artifacts/KawaiiVoiceChanger-macOS/*.zip
          ./artifacts/KawaiiVoiceChanger-Linux/*.tar.gz
        draft: false
        prerelease: false